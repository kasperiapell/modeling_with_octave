% Finds a numerical solution to a two-period intertemporal optimisation 
% problem 

function x = two_period_intertemporal_optimisation
    beta = 0.5; 
    gamma = 0.8; 
    alpha = 0.5; 
    sigma = 0.6; 

    function F = steady_state(x)
        F(1) = 
        F(1) = x(1) + x(3) - 1; 
        F(2) = (gamma - 1) / (1 - x(2)) - (gamma / x(1)) * (1 - alpha) * (1 / x(2));
        F(3) = (gamma / x(1)) - beta * (gamma / x(1)) * (1 / x(3)); 
        
        [~ duc1, dul] = utility(c1, n);
        [~ duc2, ~] = utility(c2, 0); 
    end

    function [u, duc, dul]=utility(c, n) 
        if sigma == 1
          u = gamma * log(c) + (1 - gamma) * log(1 - n); 
          duc = gamma / c; 
          dul = (1 - gamma) / (1 - n); 
        else
          u = (c^(gamma) * (1 - n)^(1 - gamma))^(1 - sigma) / (1 - sigma);
          duc = (gamma * c^(gamma - 1) * (1 - n)^(1 - n))^(1 - sigma) / (1 - sigma);
          dul = ((1 - gamma) * c^(gamma) * (1 - n)^(-gamma))^(1 - sigma) / (1 - sigma); 
        end 
    end 

    x0 = [0.5, 0.5, 0.5];
    x = fsolve(@steady_state, x0); 
end 